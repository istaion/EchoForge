"""N≈ìuds de g√©n√©ration de r√©ponses."""

import random
from typing import Dict, Any, List
from ..state.character_state import CharacterState


def generate_simple_response(state: CharacterState) -> CharacterState:
    """
    G√©n√®re une r√©ponse simple bas√©e sur la personnalit√©, sans RAG.
    
    Args:
        state: √âtat actuel du personnage
        
    Returns:
        √âtat mis √† jour avec la r√©ponse g√©n√©r√©e
    """
    state["processing_steps"].append("simple_response_generation")
    
    character_name = state["character_name"]
    personality = state["personality_traits"]
    intent = state["message_intent"]
    emotion = state["current_emotion"]
    
    # G√©n√©ration de r√©ponse simple selon l'intention
    response = _generate_personality_response(
        character_name, personality, intent, emotion, state["user_message"]
    )
    
    state["response"] = response
    
    # Debug info
    state["debug_info"]["response_generation"] = {
        "type": "simple",
        "intent_used": intent,
        "emotion_used": emotion,
        "personality_traits_count": len(personality)
    }
    
    return state


def generate_response(state: CharacterState) -> CharacterState:
    """
    G√©n√®re une r√©ponse complexe avec ou sans contexte RAG.
    
    Args:
        state: √âtat actuel du personnage
        
    Returns:
        √âtat mis √† jour avec la r√©ponse g√©n√©r√©e
    """
    state["processing_steps"].append("complex_response_generation")
    
    character_name = state["character_name"]
    personality = state["personality_traits"]
    user_message = state["user_message"]
    rag_results = state["rag_results"]
    
    # Construction du contexte pour la g√©n√©ration
    context = _build_response_context(state)
    
    # G√©n√©ration de la r√©ponse
    if rag_results:
        response = _generate_rag_enhanced_response(
            character_name, personality, user_message, context, rag_results
        )
        response_type = "rag_enhanced"
    else:
        response = _generate_contextual_response(
            character_name, personality, user_message, context
        )
        response_type = "contextual"
    
    state["response"] = response
    
    # Debug info
    state["debug_info"]["response_generation"] = {
        "type": response_type,
        "rag_results_used": len(rag_results),
        "context_elements": len(context),
        "response_length": len(response)
    }
    
    return state


def _generate_personality_response(
    character_name: str, 
    personality: Dict[str, Any], 
    intent: str, 
    emotion: str, 
    user_message: str
) -> str:
    """G√©n√®re une r√©ponse simple bas√©e uniquement sur la personnalit√©."""
    
    # Templates de r√©ponses par personnage et intention
    response_templates = {
        "fathira": {
            "greeting": [
                "Bonjour, citoyen ! Comment puis-je vous aider aujourd'hui ?",
                "Salutations ! En tant que maire, je suis √† votre service.",
                "Bienvenue ! Que puis-je faire pour notre communaut√© ?"
            ],
            "farewell": [
                "Au revoir ! Revenez quand vous aurez faim !",
                "√Ä bient√¥t ! Mes cookies vous attendront !",
                "Prenez soin de vous et mangez bien !"
            ],
            "general": [
                "En tant que maire, je veille sur tous les habitants de notre √Æle.",
                "Notre communaut√© est ma priorit√© absolue, citoyen.",
                "Parlons de ce qui vous pr√©occupe."
            ]
        },
        "claude": {
            "greeting": [
                "Salut ! Mon marteau et moi sommes √† votre service.",
                "Bonjour ! Besoin de quelque chose de r√©par√© ?",
                "Hey ! L'atelier est ouvert, que puis-je forger pour vous ?"
            ],
            "farewell": [
                "√Ä plus ! Si √ßa casse, vous savez o√π me trouver !",
                "Prenez soin de vos outils !",
                "Au revoir ! Que le m√©tal soit avec vous !"
            ],
            "general": [
                "Je peux r√©parer √† peu pr√®s n'importe quoi, mais √ßa se n√©gocie.",
                "Mon atelier a vu passer bien des objets √©tranges...",
                "Le m√©tal ne ment jamais, contrairement aux gens."
            ]
        },
        "azzedine": {
            "greeting": [
                "Bonjour ! Admirez-vous ma derni√®re cr√©ation ?",
                "Salut ! L'art textile vous int√©resse-t-il ?",
                "Bienvenue dans mon atelier de beaut√© !"
            ],
            "farewell": [
                "Au revoir ! Que la beaut√© vous accompagne !",
                "Partez avec style !",
                "√Ä bient√¥t ! Revenez quand vous aurez d√©velopp√© votre go√ªt esth√©tique."
            ],
            "general": [
                "La beaut√© est dans les d√©tails, et je suis un perfectionniste.",
                "Mes tissus sont d'une qualit√© incomparable sur cette √Æle.",
                "L'art v√©ritable demande de la patience et de l'exigence."
            ]
        },
        "roberte": {
            "greeting": [
                "Bonjour ! J'esp√®re que vous avez faim !",
                "Salut ! La cuisine sent bon aujourd'hui, n'est-ce pas ?",
                "Bienvenue ! Venez-vous pour mes fameux cookies ?"
            ],
            "farewell": [
                "Au revoir, citoyen. Que votre journ√©e soit prosp√®re !",
                "Prenez soin de vous et de notre belle √Æle !",
                "√Ä bient√¥t ! N'h√©sitez pas √† revenir me voir."
            ],
            "general": [
                "Ma cuisine est ma fiert√©, ne me d√©rangez pas pendant que je travaille !",
                "Un bon repas r√©chauffe le c≈ìur et l'√¢me.",
                "Mes cookies sont les meilleurs de l'√Æle, mais il faut les m√©riter !"
            ]
        }
    }
    
    # S√©lection du template appropri√©
    character_templates = response_templates.get(character_name.lower(), response_templates["fathira"])
    intent_templates = character_templates.get(intent, character_templates["general"])
    
    # S√©lection al√©atoire d'une r√©ponse
    response = random.choice(intent_templates)
    
    # Modification selon l'√©motion si n√©cessaire
    if emotion == "angry":
        response = response.replace("!", ".")
        response += " (Je suis un peu √©nerv√© en ce moment...)"
    elif emotion == "happy":
        response += " üòä"
    elif emotion == "sad":
        response = response.lower()
        response += " *soupir*"
    
    return response


def _build_response_context(state: CharacterState) -> Dict[str, Any]:
    """Construit le contexte pour la g√©n√©ration de r√©ponse."""
    
    context = {
        "character_name": state["character_name"],
        "current_emotion": state["current_emotion"],
        "message_intent": state["message_intent"],
        "complexity_level": state["complexity_level"],
        "conversation_turns": len(state["conversation_history"]),
        "has_rag_data": bool(state["rag_results"])
    }
    
    # Ajout du r√©sum√© de conversation si disponible
    if state.get("context_summary"):
        context["conversation_summary"] = state["context_summary"]
    
    # Ajout des actions planifi√©es
    if state["planned_actions"]:
        context["planned_actions"] = state["planned_actions"]
    
    return context


def _generate_rag_enhanced_response(
    character_name: str,
    personality: Dict[str, Any], 
    user_message: str,
    context: Dict[str, Any],
    rag_results: List[Dict[str, Any]]
) -> str:
    """G√©n√®re une r√©ponse enrichie par les donn√©es RAG."""
    
    # Extraction des informations les plus pertinentes
    relevant_info = []
    for result in rag_results:
        if result["relevance"] > 0.6:
            relevant_info.append(result["content"])
    
    # Templates de r√©ponse par personnage avec int√©gration RAG
    rag_templates = {
        "fathira": [
            "En tant que maire, je peux vous dire que {knowledge}. Notre communaut√© a une riche histoire.",
            "D'apr√®s mes connaissances de l'√Æle, {knowledge}. C'est important pour notre communaut√©.",
            "Laissez-moi vous expliquer, citoyen : {knowledge}. Voil√† ce que je sais sur le sujet."
        ],
        "claude": [
            "D'apr√®s mon exp√©rience de forgeron, {knowledge}. J'ai vu beaucoup de choses dans mon atelier.",
            "Je peux vous dire que {knowledge}. Le m√©tal garde la m√©moire des √©v√©nements.",
            "√âcoutez, {knowledge}. C'est ce que j'ai appris au fil des ann√©es."
        ],
        "azzedine": [
            "Avec mon ≈ìil artistique, je peux vous r√©v√©ler que {knowledge}. La beaut√© r√©v√®le la v√©rit√©.",
            "D'un point de vue esth√©tique, {knowledge}. Chaque d√©tail a son importance.",
            "Permettez-moi de vous √©clairer : {knowledge}. L'art r√©v√®le bien des secrets."
        ],
        "roberte": [
            "En cuisinant pour tout le monde, j'ai appris que {knowledge}. On entend beaucoup de choses en cuisine !",
            "Entre deux plats, je peux vous dire que {knowledge}. Les habitants parlent beaucoup pendant les repas.",
            "D'apr√®s ce que j'ai entendu, {knowledge}. La cuisine est le c≈ìur de l'information sur l'√Æle !"
        ]
    }
    
    # S√©lection du template
    character_templates = rag_templates.get(character_name.lower(), rag_templates["fathira"])
    template = random.choice(character_templates)
    
    # Int√©gration des connaissances
    if relevant_info:
        knowledge = relevant_info[0]  # Utilise la plus pertinente
        response = template.format(knowledge=knowledge)
    else:
        # Fallback si pas d'info pertinente
        response = _generate_contextual_response(character_name, personality, user_message, context)
    
    return response


def _generate_contextual_response(
    character_name: str,
    personality: Dict[str, Any],
    user_message: str, 
    context: Dict[str, Any]
) -> str:
    """G√©n√®re une r√©ponse contextuelle sans RAG."""
    
    # Templates contextuels par personnage
    contextual_templates = {
        "fathira": [
            "C'est une question int√©ressante, citoyen. En tant que maire, je dois r√©fl√©chir √† l'impact sur notre communaut√©.",
            "Hmm, votre demande m√©rite consid√©ration. Laissez-moi consulter mes connaissances de l'√Æle.",
            "Voil√† une pr√©occupation l√©gitime. Notre √Æle rec√®le encore bien des myst√®res."
        ],
        "claude": [
            "Int√©ressant... Laissez-moi r√©fl√©chir √† √ßa. Mes outils me disent que c'est plus complexe qu'il n'y para√Æt.",
            "Votre question me rappelle quelque chose. J'ai d√©j√† travaill√© sur des cas similaires.",
            "Ah, √ßa c'est du travail de pr√©cision ! Donnez-moi un moment pour bien vous expliquer."
        ],
        "azzedine": [
            "Quelle question fascinante ! L'esth√©tique de votre demande me pla√Æt.",
            "Votre curiosit√© t√©moigne d'un certain raffinement. Laissez-moi vous r√©pondre avec style.",
            "Ah ! Enfin quelqu'un qui s'int√©resse aux d√©tails ! C'est tout un art de bien r√©pondre."
        ],
        "roberte": [
            "√áa me rappelle une recette... Attendez, je vais vous expliquer √ßa comme il faut !",
            "Votre question me met l'eau √† la bouche ! Enfin, fa√ßon de parler...",
            "Tiens, c'est comme quand je pr√©pare mes cookies : il faut du temps et de la patience !"
        ]
    }
    
    # S√©lection et personnalisation
    character_templates = contextual_templates.get(character_name.lower(), contextual_templates["fathira"])
    response = random.choice(character_templates)
    
    # Ajout d'√©l√©ments contextuels
    if context["complexity_level"] == "complex":
        response += " Cette question demande r√©flexion..."
    
    if context["conversation_turns"] > 3:
        response += " Nous avons d√©j√† bien discut√© ensemble !"
    
    return response