import gradio as gr
import json
from datetime import datetime
import os
from typing import List, Tuple, Dict
from pathlib import Path
import base64
from io import BytesIO
from PIL import Image, ImageDraw
import math

# Import du syst√®me RAG
try:
    from main import EchoForgeRAG, ActionParsed
except ImportError:
    print("‚ö†Ô∏è Erreur: Impossible d'importer EchoForgeRAG depuis main.py")
    EchoForgeRAG = None
    ActionParsed = None

# Donn√©es des personnages avec leurs positions sur la carte
CHARACTERS = {
    "fathira": {
        "name": "Fathira",
        "role": "Maire de l'√Æle",
        "personality": "Diplomatique, curieuse et protectrice de sa communaut√©",
        "speech_style": "Formel mais chaleureux, utilise 'citoyen' et 'notre communaut√©'",
        "backstory": "Maire √©lue depuis 10 ans, garde les secrets de l'√Æle et poss√®de un tr√©sor ancestral",
        "current_mood": "neutre",
        "can_give_gold": True,
        "special_knowledge": ["Histoire de l'√Æle", "Localisation du tr√©sor", "Relations entre habitants"],
        "emoji": "üëë",
        "building": "Mairie (grande maison en haut)",
        "position": {"x": 598, "y": 190}
    },
    "claude": {
        "name": "Claude",
        "role": "Forgeron de l'√Æle", 
        "personality": "Pragmatique, direct, passionn√© par son m√©tier",
        "speech_style": "Franc, utilise du vocabulaire technique, parle de m√©tal et d'outils",
        "backstory": "Forgeron depuis 20 ans, peut r√©parer n'importe quoi mais aime n√©gocier",
        "current_mood": "neutre",
        "wants_cookies": True,
        "can_repair": True,
        "special_knowledge": ["M√©tallurgie", "R√©paration d'objets complexes", "Histoire des outils de l'√Æle"],
        "emoji": "üî®",
        "building": "Forge (maison √† gauche)",
        "position": {"x": 300, "y": 400}
    },
    "azzedine": {
        "name": "Azzedine", 
        "role": "Styliste de l'√Æle",
        "personality": "Cr√©atif, perfectionniste, parfois capricieux",
        "speech_style": "Artistique, utilise des m√©taphores, parle de beaut√© et d'esth√©tique",
        "backstory": "Styliste talentueux, vend des tissus rares mais exigeant sur la qualit√©",
        "current_mood": "neutre",
        "sells_fabric": True,
        "special_knowledge": ["Tissus et mat√©riaux", "Tendances artistiques", "Secrets de confection"],
        "emoji": "‚úÇÔ∏è",
        "building": "Atelier de couture (maison color√©e √† droite)",
        "position": {"x": 820, "y": 580}
    },
    "roberte": {
        "name": "Roberte",
        "role": "Cuisini√®re de l'√Æle",
        "personality": "G√©n√©reuse mais territoriale, perfectionniste en cuisine",
        "speech_style": "Maternel, parle de recettes et d'ingr√©dients, utilise des expressions culinaires",
        "backstory": "Cuisini√®re r√©put√©e, d√©teste √™tre d√©rang√©e pendant son travail mais offre volontiers des cookies en pause",
        "current_mood": "neutre", 
        "gives_cookies": True,
        "cooking_schedule": "Cuisine le matin (8h-12h), pause l'apr√®s-midi (14h-16h)",
        "special_knowledge": ["Recettes ancestrales", "Ingr√©dients de l'√Æle", "Habitudes alimentaires des habitants"],
        "emoji": "üë©‚Äçüç≥",
        "building": "Auberge (maison avec terrasse au centre)",
        "position": {"x": 590, "y": 480}
    }
}

# Position de la montgolfi√®re
BALLOON_POSITION = {"x": 120, "y": 120}

# √âtat global du jeu
game_state = {
    "player_gold": 0,
    "player_cookies": 0,
    "player_fabric": 0,
    "montgolfiere_repaired": False,
    "conversation_history": {},
    "current_character": None,
    "player_position": BALLOON_POSITION.copy(),
    "chat_open": False
}

# Instance globale du syst√®me RAG
rag_system = None

def initialize_rag_system():
    """Initialise le syst√®me RAG"""
    global rag_system
    
    if not EchoForgeRAG:
        print("‚ùå EchoForgeRAG non disponible")
        return False
    
    try:
        print("üöÄ Initialisation du syst√®me RAG...")
        rag_system = EchoForgeRAG(
            data_path="./data",
            vector_store_path="./vector_stores",
            model_name="llama3.1:8b"
        )
        
        print("üìö V√©rification des vector stores...")
        
        # Vector store du monde
        world_store_path = Path("./vector_stores/world_lore")
        if not world_store_path.exists():
            print("üåç Construction du vector store du monde...")
            rag_system.build_world_vectorstore()
        
        # Vector stores des personnages
        for character_id in CHARACTERS.keys():
            char_store_path = Path(f"./vector_stores/character_{character_id}")
            if not char_store_path.exists():
                print(f"üë§ Construction du vector store pour {character_id}...")
                rag_system.build_character_vectorstore(character_id)
        
        print("‚úÖ Syst√®me RAG initialis√© avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation du RAG: {str(e)}")
        return False

def create_character_avatar(emoji: str, size: int = 60, active: bool = False) -> Image.Image:
    """Cr√©e un avatar circulaire pour un personnage"""
    img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
    draw = ImageDraw.Draw(img)
    
    # Couleur du fond selon l'√©tat
    if active:
        bg_color = (100, 200, 100, 220)  # Vert actif
        border_color = (50, 150, 50, 255)
    else:
        bg_color = (255, 255, 255, 200)  # Blanc normal
        border_color = (100, 100, 100, 255)
    
    # Fond color√© circulaire
    margin = 5
    draw.ellipse([margin, margin, size-margin, size-margin], 
                fill=bg_color, outline=border_color, width=3)
    
    # Emoji au centre
    font_size = size // 2
    try:
        # Calculer la position pour centrer l'emoji
        text_bbox = draw.textbbox((0, 0), emoji)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]
        
        x = (size - text_width) // 2
        y = (size - text_height) // 2
        
        draw.text((x, y), emoji, fill=(0, 0, 0, 255))
    except:
        # Fallback
        draw.text((size//4, size//4), "?", fill=(0, 0, 0, 255))
    
    return img

def load_map_image(map_path: str = "data/img/board.png") -> Image.Image:
    """Charge l'image de la carte ou cr√©e une carte placeholder"""
    
    try:
        print(f"chemin de l'image : {Path(map_path)}")
        return Image.open(map_path)
        
    except Exception as e:
        return f"‚ùå Erreur lors de la r√©cup√©ration de l'image du board: {str(e)}"
        

def generate_interactive_map(active_character: str = None) -> Image.Image:
    """G√©n√®re la carte avec les personnages positionn√©s"""
    
    # Charger l'image de base
    map_img = load_map_image("data/img/board.png")  
    
    # Ajouter les avatars des personnages
    for char_id, char_data in CHARACTERS.items():
        pos = char_data["position"]
        is_active = (char_id == active_character)
        avatar = create_character_avatar(char_data["emoji"], 50, is_active)
        
        # Superposer l'avatar sur la carte
        map_img.paste(avatar, (pos["x"]-25, pos["y"]-25), avatar)
    
    # Ajouter l'avatar du joueur
    player_avatar = create_character_avatar("üßë", 40)
    player_pos = game_state["player_position"]
    map_img.paste(player_avatar, (player_pos["x"]-20, player_pos["y"]-20), player_avatar)
    
    return map_img

def get_conversation_history_string(character_key: str, max_messages: int = 6) -> str:
    """R√©cup√®re l'historique de conversation format√© pour un personnage"""
    if character_key not in game_state["conversation_history"]:
        return ""
    
    history = game_state["conversation_history"][character_key]
    recent_history = history[-max_messages:] if len(history) > max_messages else history
    
    formatted_history = []
    for msg in recent_history:
        role = "Joueur" if msg["role"] == "user" else CHARACTERS[character_key]["name"]
        formatted_history.append(f"{role}: {msg['content']}")
    
    return "\n".join(formatted_history)

def get_character_response(character_key: str, user_message: str) -> str:
    """Obtient une r√©ponse du personnage via le syst√®me RAG"""
    
    if not rag_system:
        return "‚ùå Syst√®me RAG non initialis√©. Red√©marrez l'application."
    
    try:
        character_data = CHARACTERS[character_key]
        
        # Parse le message utilisateur pour extraire les actions
        parsed_input = rag_system.parse_actions(user_message)
        
        # R√©cup√®re les contextes pertinents
        world_context = rag_system.retrieve_world_context(parsed_input.text, top_k=3)
        character_context = rag_system.retrieve_character_context(
            parsed_input.text, character_key, top_k=5
        )
        
        # R√©cup√®re l'historique de conversation
        conversation_history = get_conversation_history_string(character_key)
        
        # Cr√©e le prompt complet
        prompt = rag_system.create_character_prompt(
            character_data=character_data,
            world_context=world_context,
            character_context=character_context,
            parsed_input=parsed_input,
            conversation_history=conversation_history
        )
        
        # G√©n√®re la r√©ponse via le LLM local
        response = rag_system.llm.invoke(prompt)
        
        # Sauvegarde dans l'historique
        if character_key not in game_state["conversation_history"]:
            game_state["conversation_history"][character_key] = []
        
        game_state["conversation_history"][character_key].extend([
            {"role": "user", "content": user_message},
            {"role": "assistant", "content": response}
        ])
        
        # Parse la r√©ponse pour d√©tecter des actions sp√©ciales
        process_character_actions(character_key, response, parsed_input)
        
        return response
        
    except Exception as e:
        return f"‚ùå Erreur lors de la g√©n√©ration de r√©ponse: {str(e)}"

def process_character_actions(character_key: str, character_response: str, user_input):
    """Traite les actions sp√©ciales du personnage et met √† jour l'√©tat du jeu"""
    
    character_data = CHARACTERS[character_key]
    response_lower = character_response.lower()
    
    # D√©tection des actions bas√©es sur le contenu de la r√©ponse
    if character_key == "fathira" and character_data.get("can_give_gold"):
        if any(word in response_lower for word in ["donne", "offre", "voici", "prends"]) and "or" in response_lower:
            if game_state["player_gold"] < 100:
                game_state["player_gold"] += 10
                print(f"üí∞ Fathira vous a donn√© 10 pi√®ces d'or!")
    
    elif character_key == "roberte" and character_data.get("gives_cookies"):
        if any(word in response_lower for word in ["donne", "offre", "voici", "prends"]) and "cookie" in response_lower:
            if game_state["player_cookies"] < 20:
                game_state["player_cookies"] += 3
                print(f"üç™ Roberte vous a donn√© 3 cookies!")
    
    elif character_key == "azzedine" and character_data.get("sells_fabric"):
        if "tissu" in response_lower and game_state["player_gold"] >= 15:
            if any(word in response_lower for word in ["vends", "ach√®te", "prends", "voici"]):
                game_state["player_gold"] -= 15
                game_state["player_fabric"] += 1
                print(f"üß∂ Azzedine vous a vendu du tissu pour 15 or!")
    
    elif character_key == "claude" and character_data.get("can_repair"):
        if "r√©pare" in response_lower and game_state["player_cookies"] >= 5 and game_state["player_fabric"] >= 1:
            if any(word in response_lower for word in ["r√©pare", "r√©parer", "fini", "termin√©"]):
                game_state["player_cookies"] -= 5
                game_state["player_fabric"] -= 1
                game_state["montgolfiere_repaired"] = True
                print(f"üéà Claude a r√©par√© votre montgolfi√®re! Vous pouvez repartir!")

def handle_map_click(evt: gr.SelectData) -> Tuple[str, bool, str, Image.Image]:
    """G√®re les clics sur la carte"""
    if not evt.index:
        return "Cliquez sur un personnage pour lui parler!", False, "", generate_interactive_map()
    
    click_x, click_y = evt.index
    
    # V√©rifier si le clic est proche d'un personnage
    clicked_character = None
    min_distance = float('inf')
    
    for char_id, char_data in CHARACTERS.items():
        pos = char_data["position"]
        distance = math.sqrt((click_x - pos["x"])**2 + (click_y - pos["y"])**2)
        
        if distance < 40 and distance < min_distance:
            min_distance = distance
            clicked_character = char_id
    
    if clicked_character:
        game_state["current_character"] = clicked_character
        game_state["chat_open"] = True
        
        char_data = CHARACTERS[clicked_character]
        welcome_message = f"Vous approchez de {char_data['emoji']} {char_data['name']} ({char_data['role']})"
        
        # G√©n√©rer la carte avec le personnage actif mis en √©vidence
        updated_map = generate_interactive_map(clicked_character)
        
        return welcome_message, True, clicked_character, updated_map
    else:
        return "Cliquez sur un personnage pour lui parler!", False, "", generate_interactive_map()

def chat_interface(message: str, history: List[Tuple[str, str]], character_id: str) -> Tuple[List[Tuple[str, str]], str]:
    """Interface de chat avec un personnage"""
    
    if not message.strip() or not character_id:
        return history, ""
    
    if not rag_system:
        error_msg = "‚ùå Syst√®me RAG non initialis√©. Red√©marrez l'application."
        history.append((message, error_msg))
        return history, ""
    
    # Obtient la r√©ponse du personnage
    character_response = get_character_response(character_id, message)
    
    # Met √† jour l'historique d'affichage
    history.append((message, character_response))
    
    return history, ""

def close_chat() -> Tuple[bool, List, str, Image.Image]:
    """Ferme la fen√™tre de chat"""
    game_state["chat_open"] = False
    game_state["current_character"] = None
    return False, [], "", generate_interactive_map()

def get_game_status() -> str:
    """Retourne l'√©tat actuel du jeu"""
    repair_status = "‚úÖ R√©par√©e" if game_state["montgolfiere_repaired"] else "‚ùå Endommag√©e"
    
    status = f"""## üéÆ √âtat du Jeu
    
**Ressources:**
- üí∞ Or: {game_state['player_gold']}
- üç™ Cookies: {game_state['player_cookies']}
- üß∂ Tissu: {game_state['player_fabric']}

**Montgolfi√®re:** {repair_status}

**Objectif:** R√©parer votre montgolfi√®re pour quitter l'√Æle !

**Syst√®me RAG:** {"‚úÖ Actif" if rag_system else "‚ùå Non initialis√©"}
"""
    return status

def reset_game() -> Tuple[List, str, Image.Image]:
    """Remet √† z√©ro le jeu"""
    global game_state
    game_state = {
        "player_gold": 0,
        "player_cookies": 0,
        "player_fabric": 0,
        "montgolfiere_repaired": False,
        "conversation_history": {},
        "current_character": None,
        "player_position": BALLOON_POSITION.copy(),
        "chat_open": False
    }
    return [], get_game_status(), generate_interactive_map()

def create_interface():
    """Cr√©e l'interface Gradio avec carte interactive"""
    
    theme = gr.themes.Soft(
        primary_hue="blue",
        secondary_hue="emerald",
        neutral_hue="slate",
    )
    
    with gr.Blocks(theme=theme, title="üéà EchoForge RAG Interactive") as demo:
        
        # Variables d'√©tat pour l'interface
        chat_visible = gr.State(False)
        current_char = gr.State("")
        
        # En-t√™te
        gr.HTML("""
        <div style="text-align: center; padding: 20px;">
            <h1>üéà EchoForge RAG - √éle Interactive</h1>
            <h3>Cliquez sur les personnages pour leur parler</h3>
            <p><em>Donnez une √¢me √† vos personnages avec l'IA</em></p>
        </div>
        """)
        
        with gr.Row():
            # Colonne principale - Carte et Chat
            with gr.Column(scale=2):
                
                # Message d'instruction
                instruction_msg = gr.Markdown(
                    "üó∫Ô∏è **Cliquez sur un personnage sur la carte pour commencer une conversation !**",
                    visible=True
                )
                
                # Carte interactive
                map_image = gr.Image(
                    value=generate_interactive_map(),
                    interactive=True,
                    label="Carte de l'√Æle - Cliquez sur les personnages",
                    show_label=True,
                    height=480
                )
                
                # Interface de chat (initialement masqu√©e)
                with gr.Column(visible=False) as chat_container:
                    
                    character_title = gr.Markdown("## Conversation", visible=False)
                    
                    chatbot = gr.Chatbot(
                        label="Conversation",
                        height=300,
                        show_label=True,
                        container=True,
                        bubble_full_width=False
                    )
                    
                    with gr.Row():
                        msg = gr.Textbox(
                            label="Votre message",
                            placeholder="Tapez votre message ici... (utilisez *action* pour les actions physiques)",
                            lines=2,
                            scale=4
                        )
                        send_btn = gr.Button("üì§ Envoyer", scale=1, variant="primary")
                    
                    with gr.Row():
                        close_chat_btn = gr.Button("üö™ Retour √† la carte", variant="secondary")
                        clear_chat_btn = gr.Button("üóëÔ∏è Effacer chat", variant="secondary")
            
            # Colonne lat√©rale - √âtat du jeu et infos
            with gr.Column(scale=1):
                
                # √âtat du jeu
                game_status = gr.Markdown(get_game_status())
                
                gr.Markdown("---")
                
                # Guide des personnages
                gr.Markdown("""
                ## üë• Personnages de l'√Æle
                
                **üëë Fathira** - Maire  
                *Donne de l'or, conna√Æt les secrets*
                
                **üî® Claude** - Forgeron  
                *R√©pare la montgolfi√®re contre des cookies*
                
                **‚úÇÔ∏è Azzedine** - Styliste  
                *Vend du tissu contre de l'or*
                
                **üë©‚Äçüç≥ Roberte** - Cuisini√®re  
                *Donne des cookies pendant ses pauses*
                
                üí° **Astuce:** Chaque personnage a sa personnalit√© et ses motivations propres !
                """)
                
                gr.Markdown("---")
                
                # Boutons d'action
                with gr.Column():
                    refresh_btn = gr.Button("üîÑ Actualiser √âtat", variant="secondary")
                    reset_btn = gr.Button("üÜï Nouveau Jeu", variant="stop")
                    init_rag_btn = gr.Button("ü§ñ R√©initialiser RAG", variant="secondary")
        
        # Fonctions de gestion des √©v√©nements
        def update_chat_visibility(visible: bool, char_id: str):
            """Met √† jour la visibilit√© du chat"""
            if visible and char_id:
                char_data = CHARACTERS[char_id]
                title = f"## üí¨ Conversation avec {char_data['emoji']} {char_data['name']}"
                return {
                    chat_container: gr.update(visible=True),
                    character_title: gr.update(value=title, visible=True),
                    instruction_msg: gr.update(visible=False)
                }
            else:
                return {
                    chat_container: gr.update(visible=False),
                    character_title: gr.update(visible=False),
                    instruction_msg: gr.update(visible=True)
                }
        
        def reinitialize_rag():
            """R√©initialise le syst√®me RAG"""
            success = initialize_rag_system()
            return get_game_status()
        
        # Connexions des √©v√©nements
        map_image.select(
            handle_map_click,
            outputs=[instruction_msg, chat_visible, current_char, map_image]
        ).then(
            update_chat_visibility,
            inputs=[chat_visible, current_char],
            outputs=[chat_container, character_title, instruction_msg]
        )
        
        msg.submit(
            chat_interface,
            inputs=[msg, chatbot, current_char],
            outputs=[chatbot, msg]
        ).then(
            lambda: get_game_status(),
            outputs=[game_status]
        )
        
        send_btn.click(
            chat_interface,
            inputs=[msg, chatbot, current_char],
            outputs=[chatbot, msg]
        ).then(
            lambda: get_game_status(),
            outputs=[game_status]
        )
        
        close_chat_btn.click(
            close_chat,
            outputs=[chat_visible, chatbot, current_char, map_image]
        ).then(
            update_chat_visibility,
            inputs=[chat_visible, current_char],
            outputs=[chat_container, character_title, instruction_msg]
        )
        
        clear_chat_btn.click(lambda: [], outputs=[chatbot])
        
        refresh_btn.click(
            lambda: get_game_status(),
            outputs=[game_status]
        )
        
        reset_btn.click(
            reset_game,
            outputs=[chatbot, game_status, map_image]
        ).then(
            lambda: (False, "", []),
            outputs=[chat_visible, current_char, chatbot]
        ).then(
            update_chat_visibility,
            inputs=[chat_visible, current_char],
            outputs=[chat_container, character_title, instruction_msg]
        )
        
        init_rag_btn.click(
            reinitialize_rag,
            outputs=[game_status]
        )
        
        # Instructions
        gr.HTML("""
        <div style="text-align: center; padding: 20px; margin-top: 20px; background-color: #f0f0f0; border-radius: 10px;">
            <h4>üéØ Comment jouer</h4>
            <p><strong>1.</strong> Cliquez sur les avatars des personnages (emojis) sur la carte</p>
            <p><strong>2.</strong> Dialoguez intelligemment avec eux gr√¢ce au syst√®me RAG</p>
            <p><strong>3.</strong> N√©gociez pour obtenir les ressources n√©cessaires</p>
            <p><strong>4.</strong> R√©parez votre montgolfi√®re pour quitter l'√Æle !</p>
            <hr>
            <p><em>üí° Le syst√®me RAG utilise la m√©moire et la personnalit√© de chaque personnage pour des conversations plus riches !</em></p>
        </div>
        """)
    
    return demo

def main():
    """Lance l'application"""
    
    print("üéà D√©marrage d'EchoForge RAG Interactive...")
    
    # Initialisation du syst√®me RAG
    if not initialize_rag_system():
        print("‚ùå Impossible d'initialiser le syst√®me RAG.")
        print("V√©rifiez que:")
        print("  - Ollama est install√© et en cours d'ex√©cution")
        print("  - Les mod√®les llama3.1:8b et paraphrase-multilingual:278m-mpnet-base-v2-fp16 sont disponibles")
        print("  - Le dossier ./data contient les donn√©es des personnages")
        print("  - Le fichier main.py avec EchoForgeRAG est pr√©sent")
        return
    
    # Cr√©ation et lancement de l'interface
    demo = create_interface()
    
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        debug=True,
        show_error=True
    )

if __name__ == "__main__":
    main()